package com.cgbsoft.lib.utils.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cgbsoft.lib.base.model.bean.VideoInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_INFO".
*/
public class VideoInfoDao extends AbstractDao<VideoInfo, Long> {

    public static final String TABLENAME = "VIDEO_INFO";

    /**
     * Properties of entity VideoInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property VideoId = new Property(1, String.class, "videoId", false, "VIDEO_ID");
        public final static Property VideoCoverUrl = new Property(2, String.class, "videoCoverUrl", false, "VIDEO_COVER_URL");
        public final static Property SdUrl = new Property(3, String.class, "sdUrl", false, "SD_URL");
        public final static Property HdUrl = new Property(4, String.class, "hdUrl", false, "HD_URL");
        public final static Property IsLike = new Property(5, boolean.class, "isLike", false, "IS_LIKE");
        public final static Property VideoName = new Property(6, String.class, "videoName", false, "VIDEO_NAME");
        public final static Property ShortName = new Property(7, String.class, "shortName", false, "SHORT_NAME");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
        public final static Property LikeNum = new Property(9, int.class, "likeNum", false, "LIKE_NUM");
        public final static Property LocalVideoPath = new Property(10, String.class, "localVideoPath", false, "LOCAL_VIDEO_PATH");
        public final static Property CurrentTime = new Property(11, int.class, "currentTime", false, "CURRENT_TIME");
        public final static Property Status = new Property(12, int.class, "status", false, "STATUS");
        public final static Property FinalPlayTime = new Property(13, long.class, "finalPlayTime", false, "FINAL_PLAY_TIME");
        public final static Property Size = new Property(14, long.class, "size", false, "SIZE");
        public final static Property Percent = new Property(15, double.class, "percent", false, "PERCENT");
        public final static Property Downloadtype = new Property(16, int.class, "downloadtype", false, "DOWNLOADTYPE");
        public final static Property DownloadTime = new Property(17, long.class, "downloadTime", false, "DOWNLOAD_TIME");
        public final static Property Encrypt = new Property(18, int.class, "encrypt", false, "ENCRYPT");
        public final static Property HasRecord = new Property(19, int.class, "hasRecord", false, "HAS_RECORD");
        public final static Property IsDelete = new Property(20, int.class, "isDelete", false, "IS_DELETE");
    }


    public VideoInfoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"VIDEO_ID\" TEXT," + // 1: videoId
                "\"VIDEO_COVER_URL\" TEXT," + // 2: videoCoverUrl
                "\"SD_URL\" TEXT," + // 3: sdUrl
                "\"HD_URL\" TEXT," + // 4: hdUrl
                "\"IS_LIKE\" INTEGER NOT NULL ," + // 5: isLike
                "\"VIDEO_NAME\" TEXT," + // 6: videoName
                "\"SHORT_NAME\" TEXT," + // 7: shortName
                "\"CONTENT\" TEXT," + // 8: content
                "\"LIKE_NUM\" INTEGER NOT NULL ," + // 9: likeNum
                "\"LOCAL_VIDEO_PATH\" TEXT," + // 10: localVideoPath
                "\"CURRENT_TIME\" INTEGER NOT NULL ," + // 11: currentTime
                "\"STATUS\" INTEGER NOT NULL ," + // 12: status
                "\"FINAL_PLAY_TIME\" INTEGER NOT NULL ," + // 13: finalPlayTime
                "\"SIZE\" INTEGER NOT NULL ," + // 14: size
                "\"PERCENT\" REAL NOT NULL ," + // 15: percent
                "\"DOWNLOADTYPE\" INTEGER NOT NULL ," + // 16: downloadtype
                "\"DOWNLOAD_TIME\" INTEGER NOT NULL ," + // 17: downloadTime
                "\"ENCRYPT\" INTEGER NOT NULL ," + // 18: encrypt
                "\"HAS_RECORD\" INTEGER NOT NULL ," + // 19: hasRecord
                "\"IS_DELETE\" INTEGER NOT NULL );"); // 20: isDelete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(2, videoId);
        }
 
        String videoCoverUrl = entity.getVideoCoverUrl();
        if (videoCoverUrl != null) {
            stmt.bindString(3, videoCoverUrl);
        }
 
        String sdUrl = entity.getSdUrl();
        if (sdUrl != null) {
            stmt.bindString(4, sdUrl);
        }
 
        String hdUrl = entity.getHdUrl();
        if (hdUrl != null) {
            stmt.bindString(5, hdUrl);
        }
        stmt.bindLong(6, entity.getIsLike() ? 1L: 0L);
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(7, videoName);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(8, shortName);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
        stmt.bindLong(10, entity.getLikeNum());
 
        String localVideoPath = entity.getLocalVideoPath();
        if (localVideoPath != null) {
            stmt.bindString(11, localVideoPath);
        }
        stmt.bindLong(12, entity.getCurrentTime());
        stmt.bindLong(13, entity.getStatus());
        stmt.bindLong(14, entity.getFinalPlayTime());
        stmt.bindLong(15, entity.getSize());
        stmt.bindDouble(16, entity.getPercent());
        stmt.bindLong(17, entity.getDownloadtype());
        stmt.bindLong(18, entity.getDownloadTime());
        stmt.bindLong(19, entity.getEncrypt());
        stmt.bindLong(20, entity.getHasRecord());
        stmt.bindLong(21, entity.getIsDelete());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(2, videoId);
        }
 
        String videoCoverUrl = entity.getVideoCoverUrl();
        if (videoCoverUrl != null) {
            stmt.bindString(3, videoCoverUrl);
        }
 
        String sdUrl = entity.getSdUrl();
        if (sdUrl != null) {
            stmt.bindString(4, sdUrl);
        }
 
        String hdUrl = entity.getHdUrl();
        if (hdUrl != null) {
            stmt.bindString(5, hdUrl);
        }
        stmt.bindLong(6, entity.getIsLike() ? 1L: 0L);
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(7, videoName);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(8, shortName);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
        stmt.bindLong(10, entity.getLikeNum());
 
        String localVideoPath = entity.getLocalVideoPath();
        if (localVideoPath != null) {
            stmt.bindString(11, localVideoPath);
        }
        stmt.bindLong(12, entity.getCurrentTime());
        stmt.bindLong(13, entity.getStatus());
        stmt.bindLong(14, entity.getFinalPlayTime());
        stmt.bindLong(15, entity.getSize());
        stmt.bindDouble(16, entity.getPercent());
        stmt.bindLong(17, entity.getDownloadtype());
        stmt.bindLong(18, entity.getDownloadTime());
        stmt.bindLong(19, entity.getEncrypt());
        stmt.bindLong(20, entity.getHasRecord());
        stmt.bindLong(21, entity.getIsDelete());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoInfo readEntity(Cursor cursor, int offset) {
        VideoInfo entity = new VideoInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videoCoverUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sdUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hdUrl
            cursor.getShort(offset + 5) != 0, // isLike
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // videoName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shortName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.getInt(offset + 9), // likeNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // localVideoPath
            cursor.getInt(offset + 11), // currentTime
            cursor.getInt(offset + 12), // status
            cursor.getLong(offset + 13), // finalPlayTime
            cursor.getLong(offset + 14), // size
            cursor.getDouble(offset + 15), // percent
            cursor.getInt(offset + 16), // downloadtype
            cursor.getLong(offset + 17), // downloadTime
            cursor.getInt(offset + 18), // encrypt
            cursor.getInt(offset + 19), // hasRecord
            cursor.getInt(offset + 20) // isDelete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVideoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideoCoverUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSdUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHdUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsLike(cursor.getShort(offset + 5) != 0);
        entity.setVideoName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShortName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLikeNum(cursor.getInt(offset + 9));
        entity.setLocalVideoPath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCurrentTime(cursor.getInt(offset + 11));
        entity.setStatus(cursor.getInt(offset + 12));
        entity.setFinalPlayTime(cursor.getLong(offset + 13));
        entity.setSize(cursor.getLong(offset + 14));
        entity.setPercent(cursor.getDouble(offset + 15));
        entity.setDownloadtype(cursor.getInt(offset + 16));
        entity.setDownloadTime(cursor.getLong(offset + 17));
        entity.setEncrypt(cursor.getInt(offset + 18));
        entity.setHasRecord(cursor.getInt(offset + 19));
        entity.setIsDelete(cursor.getInt(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
