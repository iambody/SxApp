package com.cgbsoft.lib.utils.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cgbsoft.lib.base.model.bean.ToCBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TO_CBEAN".
*/
public class ToCBeanDao extends AbstractDao<ToCBean, String> {

    public static final String TABLENAME = "TO_CBEAN";

    /**
     * Properties of entity ToCBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CustomerName = new Property(1, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property CustomerType = new Property(2, String.class, "customerType", false, "CUSTOMER_TYPE");
        public final static Property StockAssetsTime = new Property(3, String.class, "stockAssetsTime", false, "STOCK_ASSETS_TIME");
        public final static Property RiskEvaluationIdnum = new Property(4, String.class, "riskEvaluationIdnum", false, "RISK_EVALUATION_IDNUM");
        public final static Property BandingAdviserId = new Property(5, String.class, "bandingAdviserId", false, "BANDING_ADVISER_ID");
        public final static Property RiskEvaluationPhone = new Property(6, String.class, "riskEvaluationPhone", false, "RISK_EVALUATION_PHONE");
        public final static Property BandingTime = new Property(7, String.class, "bandingTime", false, "BANDING_TIME");
        public final static Property CustomerState = new Property(8, String.class, "customerState", false, "CUSTOMER_STATE");
        public final static Property CustomerIdPhoto = new Property(9, String.class, "customerIdPhoto", false, "CUSTOMER_ID_PHOTO");
        public final static Property InvestmentType = new Property(10, String.class, "investmentType", false, "INVESTMENT_TYPE");
        public final static Property CustomerPhone = new Property(11, String.class, "customerPhone", false, "CUSTOMER_PHONE");
        public final static Property StockAssetsId = new Property(12, String.class, "stockAssetsId", false, "STOCK_ASSETS_ID");
        public final static Property AssetsCertificationImage = new Property(13, String.class, "assetsCertificationImage", false, "ASSETS_CERTIFICATION_IMAGE");
        public final static Property RiskEvaluationName = new Property(14, String.class, "riskEvaluationName", false, "RISK_EVALUATION_NAME");
        public final static Property CustomerIdNumber = new Property(15, String.class, "customerIdNumber", false, "CUSTOMER_ID_NUMBER");
        public final static Property CustomerIdType = new Property(16, String.class, "customerIdType", false, "CUSTOMER_ID_TYPE");
        public final static Property StockAssetsStatus = new Property(17, int.class, "stockAssetsStatus", false, "STOCK_ASSETS_STATUS");
        public final static Property AssetsCertificationStatus = new Property(18, int.class, "assetsCertificationStatus", false, "ASSETS_CERTIFICATION_STATUS");
        public final static Property IsEvaluated = new Property(19, int.class, "isEvaluated", false, "IS_EVALUATED");
        public final static Property CustomerRiskEvaluation = new Property(20, String.class, "customerRiskEvaluation", false, "CUSTOMER_RISK_EVALUATION");
        public final static Property StockAssetsImage = new Property(21, String.class, "stockAssetsImage", false, "STOCK_ASSETS_IMAGE");
    }


    public ToCBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ToCBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TO_CBEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CUSTOMER_NAME\" TEXT," + // 1: customerName
                "\"CUSTOMER_TYPE\" TEXT," + // 2: customerType
                "\"STOCK_ASSETS_TIME\" TEXT," + // 3: stockAssetsTime
                "\"RISK_EVALUATION_IDNUM\" TEXT," + // 4: riskEvaluationIdnum
                "\"BANDING_ADVISER_ID\" TEXT," + // 5: bandingAdviserId
                "\"RISK_EVALUATION_PHONE\" TEXT," + // 6: riskEvaluationPhone
                "\"BANDING_TIME\" TEXT," + // 7: bandingTime
                "\"CUSTOMER_STATE\" TEXT," + // 8: customerState
                "\"CUSTOMER_ID_PHOTO\" TEXT," + // 9: customerIdPhoto
                "\"INVESTMENT_TYPE\" TEXT," + // 10: investmentType
                "\"CUSTOMER_PHONE\" TEXT," + // 11: customerPhone
                "\"STOCK_ASSETS_ID\" TEXT," + // 12: stockAssetsId
                "\"ASSETS_CERTIFICATION_IMAGE\" TEXT," + // 13: assetsCertificationImage
                "\"RISK_EVALUATION_NAME\" TEXT," + // 14: riskEvaluationName
                "\"CUSTOMER_ID_NUMBER\" TEXT," + // 15: customerIdNumber
                "\"CUSTOMER_ID_TYPE\" TEXT," + // 16: customerIdType
                "\"STOCK_ASSETS_STATUS\" INTEGER NOT NULL ," + // 17: stockAssetsStatus
                "\"ASSETS_CERTIFICATION_STATUS\" INTEGER NOT NULL ," + // 18: assetsCertificationStatus
                "\"IS_EVALUATED\" INTEGER NOT NULL ," + // 19: isEvaluated
                "\"CUSTOMER_RISK_EVALUATION\" TEXT," + // 20: customerRiskEvaluation
                "\"STOCK_ASSETS_IMAGE\" TEXT);"); // 21: stockAssetsImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TO_CBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ToCBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(2, customerName);
        }
 
        String customerType = entity.getCustomerType();
        if (customerType != null) {
            stmt.bindString(3, customerType);
        }
 
        String stockAssetsTime = entity.getStockAssetsTime();
        if (stockAssetsTime != null) {
            stmt.bindString(4, stockAssetsTime);
        }
 
        String riskEvaluationIdnum = entity.getRiskEvaluationIdnum();
        if (riskEvaluationIdnum != null) {
            stmt.bindString(5, riskEvaluationIdnum);
        }
 
        String bandingAdviserId = entity.getBandingAdviserId();
        if (bandingAdviserId != null) {
            stmt.bindString(6, bandingAdviserId);
        }
 
        String riskEvaluationPhone = entity.getRiskEvaluationPhone();
        if (riskEvaluationPhone != null) {
            stmt.bindString(7, riskEvaluationPhone);
        }
 
        String bandingTime = entity.getBandingTime();
        if (bandingTime != null) {
            stmt.bindString(8, bandingTime);
        }
 
        String customerState = entity.getCustomerState();
        if (customerState != null) {
            stmt.bindString(9, customerState);
        }
 
        String customerIdPhoto = entity.getCustomerIdPhoto();
        if (customerIdPhoto != null) {
            stmt.bindString(10, customerIdPhoto);
        }
 
        String investmentType = entity.getInvestmentType();
        if (investmentType != null) {
            stmt.bindString(11, investmentType);
        }
 
        String customerPhone = entity.getCustomerPhone();
        if (customerPhone != null) {
            stmt.bindString(12, customerPhone);
        }
 
        String stockAssetsId = entity.getStockAssetsId();
        if (stockAssetsId != null) {
            stmt.bindString(13, stockAssetsId);
        }
 
        String assetsCertificationImage = entity.getAssetsCertificationImage();
        if (assetsCertificationImage != null) {
            stmt.bindString(14, assetsCertificationImage);
        }
 
        String riskEvaluationName = entity.getRiskEvaluationName();
        if (riskEvaluationName != null) {
            stmt.bindString(15, riskEvaluationName);
        }
 
        String customerIdNumber = entity.getCustomerIdNumber();
        if (customerIdNumber != null) {
            stmt.bindString(16, customerIdNumber);
        }
 
        String customerIdType = entity.getCustomerIdType();
        if (customerIdType != null) {
            stmt.bindString(17, customerIdType);
        }
        stmt.bindLong(18, entity.getStockAssetsStatus());
        stmt.bindLong(19, entity.getAssetsCertificationStatus());
        stmt.bindLong(20, entity.getIsEvaluated());
 
        String customerRiskEvaluation = entity.getCustomerRiskEvaluation();
        if (customerRiskEvaluation != null) {
            stmt.bindString(21, customerRiskEvaluation);
        }
 
        String stockAssetsImage = entity.getStockAssetsImage();
        if (stockAssetsImage != null) {
            stmt.bindString(22, stockAssetsImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ToCBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(2, customerName);
        }
 
        String customerType = entity.getCustomerType();
        if (customerType != null) {
            stmt.bindString(3, customerType);
        }
 
        String stockAssetsTime = entity.getStockAssetsTime();
        if (stockAssetsTime != null) {
            stmt.bindString(4, stockAssetsTime);
        }
 
        String riskEvaluationIdnum = entity.getRiskEvaluationIdnum();
        if (riskEvaluationIdnum != null) {
            stmt.bindString(5, riskEvaluationIdnum);
        }
 
        String bandingAdviserId = entity.getBandingAdviserId();
        if (bandingAdviserId != null) {
            stmt.bindString(6, bandingAdviserId);
        }
 
        String riskEvaluationPhone = entity.getRiskEvaluationPhone();
        if (riskEvaluationPhone != null) {
            stmt.bindString(7, riskEvaluationPhone);
        }
 
        String bandingTime = entity.getBandingTime();
        if (bandingTime != null) {
            stmt.bindString(8, bandingTime);
        }
 
        String customerState = entity.getCustomerState();
        if (customerState != null) {
            stmt.bindString(9, customerState);
        }
 
        String customerIdPhoto = entity.getCustomerIdPhoto();
        if (customerIdPhoto != null) {
            stmt.bindString(10, customerIdPhoto);
        }
 
        String investmentType = entity.getInvestmentType();
        if (investmentType != null) {
            stmt.bindString(11, investmentType);
        }
 
        String customerPhone = entity.getCustomerPhone();
        if (customerPhone != null) {
            stmt.bindString(12, customerPhone);
        }
 
        String stockAssetsId = entity.getStockAssetsId();
        if (stockAssetsId != null) {
            stmt.bindString(13, stockAssetsId);
        }
 
        String assetsCertificationImage = entity.getAssetsCertificationImage();
        if (assetsCertificationImage != null) {
            stmt.bindString(14, assetsCertificationImage);
        }
 
        String riskEvaluationName = entity.getRiskEvaluationName();
        if (riskEvaluationName != null) {
            stmt.bindString(15, riskEvaluationName);
        }
 
        String customerIdNumber = entity.getCustomerIdNumber();
        if (customerIdNumber != null) {
            stmt.bindString(16, customerIdNumber);
        }
 
        String customerIdType = entity.getCustomerIdType();
        if (customerIdType != null) {
            stmt.bindString(17, customerIdType);
        }
        stmt.bindLong(18, entity.getStockAssetsStatus());
        stmt.bindLong(19, entity.getAssetsCertificationStatus());
        stmt.bindLong(20, entity.getIsEvaluated());
 
        String customerRiskEvaluation = entity.getCustomerRiskEvaluation();
        if (customerRiskEvaluation != null) {
            stmt.bindString(21, customerRiskEvaluation);
        }
 
        String stockAssetsImage = entity.getStockAssetsImage();
        if (stockAssetsImage != null) {
            stmt.bindString(22, stockAssetsImage);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ToCBean readEntity(Cursor cursor, int offset) {
        ToCBean entity = new ToCBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // customerName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customerType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stockAssetsTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // riskEvaluationIdnum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bandingAdviserId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // riskEvaluationPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bandingTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // customerState
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // customerIdPhoto
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // investmentType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // customerPhone
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // stockAssetsId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // assetsCertificationImage
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // riskEvaluationName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // customerIdNumber
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // customerIdType
            cursor.getInt(offset + 17), // stockAssetsStatus
            cursor.getInt(offset + 18), // assetsCertificationStatus
            cursor.getInt(offset + 19), // isEvaluated
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // customerRiskEvaluation
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // stockAssetsImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ToCBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCustomerName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCustomerType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStockAssetsTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRiskEvaluationIdnum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBandingAdviserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRiskEvaluationPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBandingTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCustomerState(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCustomerIdPhoto(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setInvestmentType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCustomerPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStockAssetsId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAssetsCertificationImage(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRiskEvaluationName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCustomerIdNumber(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCustomerIdType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStockAssetsStatus(cursor.getInt(offset + 17));
        entity.setAssetsCertificationStatus(cursor.getInt(offset + 18));
        entity.setIsEvaluated(cursor.getInt(offset + 19));
        entity.setCustomerRiskEvaluation(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStockAssetsImage(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ToCBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ToCBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ToCBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
