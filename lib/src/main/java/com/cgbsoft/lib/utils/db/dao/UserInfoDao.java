package com.cgbsoft.lib.utils.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cgbsoft.lib.base.model.bean.ToBBean;
import com.cgbsoft.lib.base.model.bean.ToCBean;

import com.cgbsoft.lib.base.model.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Birthday = new Property(0, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Sex = new Property(1, String.class, "sex", false, "SEX");
        public final static Property HeadImageUrl = new Property(2, String.class, "headImageUrl", false, "HEAD_IMAGE_URL");
        public final static Property Unionid = new Property(3, String.class, "unionid", false, "UNIONID");
        public final static Property RcToken = new Property(4, String.class, "rcToken", false, "RC_TOKEN");
        public final static Property AdviserRealName = new Property(5, String.class, "adviserRealName", false, "ADVISER_REAL_NAME");
        public final static Property AdviserPhone = new Property(6, String.class, "adviserPhone", false, "ADVISER_PHONE");
        public final static Property MemoToMember = new Property(7, String.class, "memoToMember", false, "MEMO_TO_MEMBER");
        public final static Property Education = new Property(8, String.class, "education", false, "EDUCATION");
        public final static Property AuthenticationType = new Property(9, String.class, "authenticationType", false, "AUTHENTICATION_TYPE");
        public final static Property Id = new Property(10, String.class, "id", true, "ID");
        public final static Property PhoneNum = new Property(11, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property ResidentCity = new Property(12, String.class, "residentCity", false, "RESIDENT_CITY");
        public final static Property IsSingIn = new Property(13, int.class, "isSingIn", false, "IS_SING_IN");
        public final static Property Email = new Property(14, String.class, "email", false, "EMAIL");
        public final static Property NickName = new Property(15, String.class, "nickName", false, "NICK_NAME");
        public final static Property AgeStage = new Property(16, String.class, "ageStage", false, "AGE_STAGE");
        public final static Property UserName = new Property(17, String.class, "userName", false, "USER_NAME");
        public final static Property RealName = new Property(18, String.class, "realName", false, "REAL_NAME");
        public final static Property MyPoint = new Property(19, int.class, "myPoint", false, "MY_POINT");
        public final static Property FatherId = new Property(20, String.class, "fatherId", false, "FATHER_ID");
        public final static Property LastLoginTime = new Property(21, String.class, "lastLoginTime", false, "LAST_LOGIN_TIME");
        public final static Property MemoToFather = new Property(22, String.class, "memoToFather", false, "MEMO_TO_FATHER");
        public final static Property ToC = new Property(23, String.class, "toC", false, "TO_C");
        public final static Property ToB = new Property(24, String.class, "toB", false, "TO_B");
    }

    private DaoSession daoSession;


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"BIRTHDAY\" TEXT," + // 0: birthday
                "\"SEX\" TEXT," + // 1: sex
                "\"HEAD_IMAGE_URL\" TEXT," + // 2: headImageUrl
                "\"UNIONID\" TEXT," + // 3: unionid
                "\"RC_TOKEN\" TEXT," + // 4: rcToken
                "\"ADVISER_REAL_NAME\" TEXT," + // 5: adviserRealName
                "\"ADVISER_PHONE\" TEXT," + // 6: adviserPhone
                "\"MEMO_TO_MEMBER\" TEXT," + // 7: memoToMember
                "\"EDUCATION\" TEXT," + // 8: education
                "\"AUTHENTICATION_TYPE\" TEXT," + // 9: authenticationType
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 10: id
                "\"PHONE_NUM\" TEXT," + // 11: phoneNum
                "\"RESIDENT_CITY\" TEXT," + // 12: residentCity
                "\"IS_SING_IN\" INTEGER NOT NULL ," + // 13: isSingIn
                "\"EMAIL\" TEXT," + // 14: email
                "\"NICK_NAME\" TEXT," + // 15: nickName
                "\"AGE_STAGE\" TEXT," + // 16: ageStage
                "\"USER_NAME\" TEXT," + // 17: userName
                "\"REAL_NAME\" TEXT," + // 18: realName
                "\"MY_POINT\" INTEGER NOT NULL ," + // 19: myPoint
                "\"FATHER_ID\" TEXT," + // 20: fatherId
                "\"LAST_LOGIN_TIME\" TEXT," + // 21: lastLoginTime
                "\"MEMO_TO_FATHER\" TEXT," + // 22: memoToFather
                "\"TO_C\" TEXT," + // 23: toC
                "\"TO_B\" TEXT);"); // 24: toB
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(1, birthday);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(2, sex);
        }
 
        String headImageUrl = entity.getHeadImageUrl();
        if (headImageUrl != null) {
            stmt.bindString(3, headImageUrl);
        }
 
        String unionid = entity.getUnionid();
        if (unionid != null) {
            stmt.bindString(4, unionid);
        }
 
        String rcToken = entity.getRcToken();
        if (rcToken != null) {
            stmt.bindString(5, rcToken);
        }
 
        String adviserRealName = entity.getAdviserRealName();
        if (adviserRealName != null) {
            stmt.bindString(6, adviserRealName);
        }
 
        String adviserPhone = entity.getAdviserPhone();
        if (adviserPhone != null) {
            stmt.bindString(7, adviserPhone);
        }
 
        String memoToMember = entity.getMemoToMember();
        if (memoToMember != null) {
            stmt.bindString(8, memoToMember);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(9, education);
        }
 
        String authenticationType = entity.getAuthenticationType();
        if (authenticationType != null) {
            stmt.bindString(10, authenticationType);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(11, id);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(12, phoneNum);
        }
 
        String residentCity = entity.getResidentCity();
        if (residentCity != null) {
            stmt.bindString(13, residentCity);
        }
        stmt.bindLong(14, entity.getIsSingIn());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(15, email);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(16, nickName);
        }
 
        String ageStage = entity.getAgeStage();
        if (ageStage != null) {
            stmt.bindString(17, ageStage);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(18, userName);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(19, realName);
        }
        stmt.bindLong(20, entity.getMyPoint());
 
        String fatherId = entity.getFatherId();
        if (fatherId != null) {
            stmt.bindString(21, fatherId);
        }
 
        String lastLoginTime = entity.getLastLoginTime();
        if (lastLoginTime != null) {
            stmt.bindString(22, lastLoginTime);
        }
 
        String memoToFather = entity.getMemoToFather();
        if (memoToFather != null) {
            stmt.bindString(23, memoToFather);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(1, birthday);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(2, sex);
        }
 
        String headImageUrl = entity.getHeadImageUrl();
        if (headImageUrl != null) {
            stmt.bindString(3, headImageUrl);
        }
 
        String unionid = entity.getUnionid();
        if (unionid != null) {
            stmt.bindString(4, unionid);
        }
 
        String rcToken = entity.getRcToken();
        if (rcToken != null) {
            stmt.bindString(5, rcToken);
        }
 
        String adviserRealName = entity.getAdviserRealName();
        if (adviserRealName != null) {
            stmt.bindString(6, adviserRealName);
        }
 
        String adviserPhone = entity.getAdviserPhone();
        if (adviserPhone != null) {
            stmt.bindString(7, adviserPhone);
        }
 
        String memoToMember = entity.getMemoToMember();
        if (memoToMember != null) {
            stmt.bindString(8, memoToMember);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(9, education);
        }
 
        String authenticationType = entity.getAuthenticationType();
        if (authenticationType != null) {
            stmt.bindString(10, authenticationType);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(11, id);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(12, phoneNum);
        }
 
        String residentCity = entity.getResidentCity();
        if (residentCity != null) {
            stmt.bindString(13, residentCity);
        }
        stmt.bindLong(14, entity.getIsSingIn());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(15, email);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(16, nickName);
        }
 
        String ageStage = entity.getAgeStage();
        if (ageStage != null) {
            stmt.bindString(17, ageStage);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(18, userName);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(19, realName);
        }
        stmt.bindLong(20, entity.getMyPoint());
 
        String fatherId = entity.getFatherId();
        if (fatherId != null) {
            stmt.bindString(21, fatherId);
        }
 
        String lastLoginTime = entity.getLastLoginTime();
        if (lastLoginTime != null) {
            stmt.bindString(22, lastLoginTime);
        }
 
        String memoToFather = entity.getMemoToFather();
        if (memoToFather != null) {
            stmt.bindString(23, memoToFather);
        }
    }

    @Override
    protected final void attachEntity(UserInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // birthday
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // headImageUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // unionid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rcToken
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // adviserRealName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // adviserPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // memoToMember
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // education
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // authenticationType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // id
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // phoneNum
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // residentCity
            cursor.getInt(offset + 13), // isSingIn
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // email
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // nickName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // ageStage
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // userName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // realName
            cursor.getInt(offset + 19), // myPoint
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // fatherId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // lastLoginTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // memoToFather
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setBirthday(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnionid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRcToken(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdviserRealName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAdviserPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMemoToMember(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEducation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAuthenticationType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhoneNum(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setResidentCity(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsSingIn(cursor.getInt(offset + 13));
        entity.setEmail(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setNickName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAgeStage(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setUserName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRealName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMyPoint(cursor.getInt(offset + 19));
        entity.setFatherId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setLastLoginTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setMemoToFather(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getToCBeanDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getToBBeanDao().getAllColumns());
            builder.append(" FROM USER_INFO T");
            builder.append(" LEFT JOIN TO_CBEAN T0 ON T.\"TO_C\"=T0.\"ID\"");
            builder.append(" LEFT JOIN TO_BBEAN T1 ON T.\"TO_B\"=T1.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected UserInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        UserInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ToCBean toC = loadCurrentOther(daoSession.getToCBeanDao(), cursor, offset);
        entity.setToC(toC);
        offset += daoSession.getToCBeanDao().getAllColumns().length;

        ToBBean toB = loadCurrentOther(daoSession.getToBBeanDao(), cursor, offset);
        entity.setToB(toB);

        return entity;    
    }

    public UserInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<UserInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<UserInfo> list = new ArrayList<UserInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<UserInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<UserInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
